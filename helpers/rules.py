from helpers.enums import TokenType as tt

regex_rules = [
    # Opcodes
    (r'(?:^|\W)adc(?:$|\W)|(?:^|\W)ADC(?:$|\W)', tt.ADC),
    (r'(?:^|\W)add(?:$|\W)|(?:^|\W)ADD(?:$|\W)', tt.ADD),
    (r'(?:^|\W)and(?:$|\W)|(?:^|\W)AND(?:$|\W)', tt.AND),
    (r'(?:^|\W)bit(?:$|\W)|(?:^|\W)BIT(?:$|\W)', tt.BIT),
    (r'(?:^|\W)call(?:$|\W)|(?:^|\W)CALL(?:$|\W)', tt.CALL),
    (r'(?:^|\W)ccf(?:$|\W)|(?:^|\W)CCF(?:$|\W)', tt.CCF),
    (r'(?:^|\W)cpl(?:$|\W)|(?:^|\W)CPL(?:$|\W)', tt.CPL),
    (r'(?:^|\W)cp(?:$|\W)|(?:^|\W)CP(?:$|\W)', tt.CP),
    (r'(?:^|\W)daa(?:$|\W)|(?:^|\W)DAA(?:$|\W)', tt.DAA),
    (r'(?:^|\W)dec(?:$|\W)|(?:^|\W)DEC(?:$|\W)', tt.DEC),
    (r'(?:^|\W)di(?:$|\W)|(?:^|\W)DI(?:$|\W)', tt.DI),
    (r'(?:^|\W)ei(?:$|\W)|(?:^|\W)EI(?:$|\W)', tt.EI),
    (r'(?:^|\W)halt(?:$|\W)|(?:^|\W)HALT(?:$|\W)', tt.HALT),
    (r'(?:^|\W)inc(?:$|\W)|(?:^|\W)INC(?:$|\W)', tt.INC),
    (r'(?:^|\W)jp(?:$|\W)|(?:^|\W)JP(?:$|\W)', tt.JP),
    (r'(?:^|\W)jr(?:$|\W)|(?:^|\W)JR(?:$|\W)', tt.JR),
    (r'(?:^|\W)ldd(?:$|\W)|(?:^|\W)LDD(?:$|\W)', tt.LDD),
    (r'(?:^|\W)ldh(?:$|\W)|(?:^|\W)LDH(?:$|\W)', tt.LDH),
    (r'(?:^|\W)ldi(?:$|\W)|(?:^|\W)LDI(?:$|\W)', tt.LDI),
    (r'(?:^|\W)ld(?:$|\W)|(?:^|\W)LD(?:$|\W)', tt.LD),
    (r'(?:^|\W)nop(?:$|\W)|(?:^|\W)NOP(?:$|\W)', tt.NOP),
    (r'(?:^|\W)or(?:$|\W)|(?:^|\W)OR(?:$|\W)', tt.OR),
    (r'(?:^|\W)pop(?:$|\W)|(?:^|\W)POP(?:$|\W)', tt.POP),
    (r'(?:^|\W)push(?:$|\W)|(?:^|\W)PUSH(?:$|\W)', tt.PUSH),
    (r'(?:^|\W)res(?:$|\W)|(?:^|\W)RES(?:$|\W)', tt.RES),
    (r'(?:^|\W)reti(?:$|\W)|(?:^|\W)RETI(?:$|\W)', tt.RETI),
    (r'(?:^|\W)ret(?:$|\W)|(?:^|\W)RET(?:$|\W)', tt.RET),
    (r'(?:^|\W)rlca(?:$|\W)|(?:^|\W)RLCA(?:$|\W)', tt.RLCA),
    (r'(?:^|\W)rla(?:$|\W)|(?:^|\W)RLA(?:$|\W)', tt.RLA),
    (r'(?:^|\W)rlc(?:$|\W)|(?:^|\W)RLC(?:$|\W)', tt.RLC),
    (r'(?:^|\W)rl(?:$|\W)|(?:^|\W)RL(?:$|\W)', tt.RL),
    (r'(?:^|\W)rrca(?:$|\W)|(?:^|\W)RRCA(?:$|\W)', tt.RRCA),
    (r'(?:^|\W)rra(?:$|\W)|(?:^|\W)RRA(?:$|\W)', tt.RRA),
    (r'(?:^|\W)rrc(?:$|\W)|(?:^|\W)RRC(?:$|\W)', tt.RRC),
    (r'(?:^|\W)rr(?:$|\W)|(?:^|\W)RR(?:$|\W)', tt.RR),
    (r'(?:^|\W)rst(?:$|\W)|(?:^|\W)RST(?:$|\W)', tt.RST),
    (r'(?:^|\W)sbc(?:$|\W)|(?:^|\W)SBC(?:$|\W)', tt.SBC),
    (r'(?:^|\W)scf(?:$|\W)|(?:^|\W)SCF(?:$|\W)', tt.SCF),
    (r'(?:^|\W)set(?:$|\W)|(?:^|\W)SET(?:$|\W)', tt.SET),
    (r'(?:^|\W)sla(?:$|\W)|(?:^|\W)SLA(?:$|\W)', tt.SLA),
    (r'(?:^|\W)sra(?:$|\W)|(?:^|\W)SRA(?:$|\W)', tt.SRA),
    (r'(?:^|\W)srl(?:$|\W)|(?:^|\W)SRL(?:$|\W)', tt.SRL),
    (r'(?:^|\W)stop(?:$|\W)|(?:^|\W)STOP(?:$|\W)', tt.STOP),
    (r'(?:^|\W)sub(?:$|\W)|(?:^|\W)SUB(?:$|\W)', tt.SUB),
    (r'(?:^|\W)swap(?:$|\W)|(?:^|\W)SWAP(?:$|\W)', tt.SWAP),
    (r'(?:^|\W)xor(?:$|\W)|(?:^|\W)XOR(?:$|\W)', tt.XOR),
    # Labels
    (r'.*:|[a-zA-Z]{3,}', tt.LABEL),
    # 16-bit registers
    (r'(?:^|\W)af(?:$|\W)|(?:^|\W)AF(?:$|\W)', tt.REGISTER_AF),
    (r'(?:^|\W)bc(?:$|\W)|(?:^|\W)BC(?:$|\W)', tt.REGISTER_BC),
    (r'(?:^|\W)de(?:$|\W)|(?:^|\W)DE(?:$|\W)', tt.REGISTER_DE),
    (r'(?:^|\W)hl(?:$|\W)|(?:^|\W)HL(?:$|\W)', tt.REGISTER_HL),
    (r'(?:^|\W)sp(?:$|\W)|(?:^|\W)SP(?:$|\W)', tt.REGISTER_SP),
    (r'(?:^|\W)pc(?:$|\W)|(?:^|\W)PC(?:$|\W)', tt.REGISTER_PC),
    # 8-bit Registers
    (r'(?:^|\W)a(?:$|\W)|(?:^|\W)A(?:$|\W)', tt.REGISTER_A),
    (r'(?:^|\W)b(?:$|\W)|(?:^|\W)B(?:$|\W)', tt.REGISTER_B),
    (r'(?:^|\W)c(?:$|\W)|(?:^|\W)C(?:$|\W)', tt.REGISTER_C),
    (r'(?:^|\W)d(?:$|\W)|(?:^|\W)D(?:$|\W)', tt.REGISTER_D),
    (r'(?:^|\W)e(?:$|\W)|(?:^|\W)E(?:$|\W)', tt.REGISTER_E),
    (r'(?:^|\W)f(?:$|\W)|(?:^|\W)F(?:$|\W)', tt.REGISTER_F),
    (r'(?:^|\W)h(?:$|\W)|(?:^|\W)H(?:$|\W)', tt.REGISTER_H),
    (r'(?:^|\W)l(?:$|\W)|(?:^|\W)L(?:$|\W)', tt.REGISTER_L),
    # Conditions
    (r'(?:^|\W)nz(?:$|\W)|(?:^|\W)NZ(?:$|\W)', tt.CONDITION_NZ),
    (r'(?:^|\W)z(?:$|\W)|(?:^|\W)Z(?:$|\W)', tt.CONDITION_Z),
    (r'(?:^|\W)nc(?:$|\W)|(?:^|\W)NC(?:$|\W)', tt.CONDITION_NC),
    (r'(?:^|\W)c(?:$|\W)|(?:^|\W)C(?:$|\W)', tt.CONDITION_C),
    # Values
    (r'[0-7]{1}', tt.BIT_VALUE),
    (r'#.*', tt.VALUE, tt.DECIMAL),
    (r'\d', tt.VALUE, tt.DECIMAL),
    (r'\$.*', tt.VALUE, tt.HEXADECIMAL),
    (r'%.*', tt.VALUE, tt.BINARY)
]

parser_rules = [
    # ADC instructions
    (tt.ADC, tt.REGISTER_A, tt.REGISTER_A),
    (tt.ADC, tt.REGISTER_A, tt.REGISTER_B),
    (tt.ADC, tt.REGISTER_A, tt.REGISTER_C),
    (tt.ADC, tt.REGISTER_A, tt.REGISTER_D),
    (tt.ADC, tt.REGISTER_A, tt.REGISTER_E),
    (tt.ADC, tt.REGISTER_A, tt.REGISTER_H),
    (tt.ADC, tt.REGISTER_A, tt.REGISTER_L),
    (tt.ADC, tt.REGISTER_A, tt.VALUE),
    # ADD instructions
    (tt.ADD, tt.REGISTER_A, tt.REGISTER_A),
    (tt.ADD, tt.REGISTER_A, tt.REGISTER_B),
    (tt.ADD, tt.REGISTER_A, tt.REGISTER_C),
    (tt.ADD, tt.REGISTER_A, tt.REGISTER_D),
    (tt.ADD, tt.REGISTER_A, tt.REGISTER_E),
    (tt.ADD, tt.REGISTER_A, tt.REGISTER_H),
    (tt.ADD, tt.REGISTER_A, tt.REGISTER_L),
    (tt.ADD, tt.REGISTER_A, tt.VALUE),
    (tt.ADD, tt.REGISTER_HL, tt.REGISTER_BC),
    (tt.ADD, tt.REGISTER_HL, tt.REGISTER_DE),
    (tt.ADD, tt.REGISTER_HL, tt.REGISTER_HL),
    (tt.ADD, tt.REGISTER_HL, tt.REGISTER_SP),
    # AND instructions
    (tt.AND, tt.REGISTER_A),
    (tt.AND, tt.REGISTER_B),
    (tt.AND, tt.REGISTER_C),
    (tt.AND, tt.REGISTER_D),
    (tt.AND, tt.REGISTER_E),
    (tt.AND, tt.REGISTER_H),
    (tt.AND, tt.REGISTER_L),
    (tt.AND, tt.VALUE),
    # BIT instructions
    (tt.BIT, tt.BIT_VALUE, tt.REGISTER_A),
    (tt.BIT, tt.BIT_VALUE, tt.REGISTER_B),
    (tt.BIT, tt.BIT_VALUE, tt.REGISTER_C),
    (tt.BIT, tt.BIT_VALUE, tt.REGISTER_D),
    (tt.BIT, tt.BIT_VALUE, tt.REGISTER_E),
    (tt.BIT, tt.BIT_VALUE, tt.REGISTER_H),
    (tt.BIT, tt.BIT_VALUE, tt.REGISTER_L),
    # CALL instructions
    (tt.CALL, tt.LABEL),
    (tt.CALL, tt.CONDITION_NZ, tt.LABEL),
    (tt.CALL, tt.CONDITION_Z, tt.LABEL),
    (tt.CALL, tt.CONDITION_NC, tt.LABEL),
    (tt.CALL, tt.CONDITION_C, tt.LABEL),
    # CCF instructions
    (tt.CCF,),
    # CP instructions
    (tt.CP, tt.REGISTER_A),
    (tt.CP, tt.REGISTER_B),
    (tt.CP, tt.REGISTER_C),
    (tt.CP, tt.REGISTER_D),
    (tt.CP, tt.REGISTER_E),
    (tt.CP, tt.REGISTER_H),
    (tt.CP, tt.REGISTER_L),
    (tt.CP, tt.VALUE),
    # CPL instructions
    (tt.CPL,),
    # DAA instructions
    (tt.DAA,),
    # DEC instructions
    (tt.DEC, tt.REGISTER_A),
    (tt.DEC, tt.REGISTER_B),
    (tt.DEC, tt.REGISTER_C),
    (tt.DEC, tt.REGISTER_D),
    (tt.DEC, tt.REGISTER_E),
    (tt.DEC, tt.REGISTER_H),
    (tt.DEC, tt.REGISTER_L),
    (tt.DEC, tt.REGISTER_BC),
    (tt.DEC, tt.REGISTER_DE),
    (tt.DEC, tt.REGISTER_HL),
    (tt.DEC, tt.REGISTER_SP),
    # DI instructions
    (tt.DI,),
    # EI instructions
    (tt.EI,),
    # HALT instructions
    (tt.HALT,),
    # INC instructions
    (tt.INC, tt.REGISTER_A),
    (tt.INC, tt.REGISTER_B),
    (tt.INC, tt.REGISTER_C),
    (tt.INC, tt.REGISTER_D),
    (tt.INC, tt.REGISTER_E),
    (tt.INC, tt.REGISTER_H),
    (tt.INC, tt.REGISTER_L),
    (tt.INC, tt.REGISTER_BC),
    (tt.INC, tt.REGISTER_DE),
    (tt.INC, tt.REGISTER_HL),
    (tt.INC, tt.REGISTER_SP),
    # JP instructions
    (tt.JP, tt.LABEL),
    (tt.JP, tt.CONDITION_NZ, tt.LABEL),
    (tt.JP, tt.CONDITION_Z, tt.LABEL),
    (tt.JP, tt.CONDITION_NC, tt.LABEL),
    (tt.JP, tt.CONDITION_C, tt.LABEL),
    (tt.JP, tt.REGISTER_HL),
    # JR instructions
    (tt.JR, tt.VALUE),
    (tt.JR, tt.CONDITION_NZ, tt.VALUE),
    (tt.JR, tt.CONDITION_Z, tt.VALUE),
    (tt.JR, tt.CONDITION_NC, tt.VALUE),
    (tt.JR, tt.CONDITION_C, tt.VALUE),
    # LD instructions
    (tt.LD, tt.REGISTER_A, tt.VALUE),
    (tt.LD, tt.REGISTER_B, tt.VALUE),
    (tt.LD, tt.REGISTER_C, tt.VALUE),
    (tt.LD, tt.REGISTER_D, tt.VALUE),
    (tt.LD, tt.REGISTER_E, tt.VALUE),
    (tt.LD, tt.REGISTER_H, tt.VALUE),
    (tt.LD, tt.REGISTER_L, tt.VALUE),
    (tt.LD, tt.REGISTER_BC, tt.VALUE),
    (tt.LD, tt.REGISTER_DE, tt.VALUE),
    (tt.LD, tt.REGISTER_HL, tt.VALUE),
    (tt.LD, tt.REGISTER_SP, tt.VALUE),
    (tt.LD, tt.REGISTER_A, tt.REGISTER_A),
    (tt.LD, tt.REGISTER_A, tt.REGISTER_B),
    (tt.LD, tt.REGISTER_A, tt.REGISTER_C),
    (tt.LD, tt.REGISTER_A, tt.REGISTER_D),
    (tt.LD, tt.REGISTER_A, tt.REGISTER_E),
    (tt.LD, tt.REGISTER_A, tt.REGISTER_H),
    (tt.LD, tt.REGISTER_A, tt.REGISTER_L),
    (tt.LD, tt.REGISTER_A, tt.REGISTER_BC),
    (tt.LD, tt.REGISTER_A, tt.REGISTER_DE),
    (tt.LD, tt.REGISTER_A, tt.REGISTER_HL),
    (tt.LD, tt.REGISTER_B, tt.REGISTER_A),
    (tt.LD, tt.REGISTER_B, tt.REGISTER_B),
    (tt.LD, tt.REGISTER_B, tt.REGISTER_C),
    (tt.LD, tt.REGISTER_B, tt.REGISTER_D),
    (tt.LD, tt.REGISTER_B, tt.REGISTER_E),
    (tt.LD, tt.REGISTER_B, tt.REGISTER_H),
    (tt.LD, tt.REGISTER_B, tt.REGISTER_L),
    (tt.LD, tt.REGISTER_B, tt.REGISTER_HL),
    (tt.LD, tt.REGISTER_C, tt.REGISTER_A),
    (tt.LD, tt.REGISTER_C, tt.REGISTER_B),
    (tt.LD, tt.REGISTER_C, tt.REGISTER_C),
    (tt.LD, tt.REGISTER_C, tt.REGISTER_D),
    (tt.LD, tt.REGISTER_C, tt.REGISTER_E),
    (tt.LD, tt.REGISTER_C, tt.REGISTER_H),
    (tt.LD, tt.REGISTER_C, tt.REGISTER_L),
    (tt.LD, tt.REGISTER_C, tt.REGISTER_HL),
    (tt.LD, tt.REGISTER_D, tt.REGISTER_A),
    (tt.LD, tt.REGISTER_D, tt.REGISTER_B),
    (tt.LD, tt.REGISTER_D, tt.REGISTER_C),
    (tt.LD, tt.REGISTER_D, tt.REGISTER_D),
    (tt.LD, tt.REGISTER_D, tt.REGISTER_E),
    (tt.LD, tt.REGISTER_D, tt.REGISTER_H),
    (tt.LD, tt.REGISTER_D, tt.REGISTER_L),
    (tt.LD, tt.REGISTER_D, tt.REGISTER_HL),
    (tt.LD, tt.REGISTER_E, tt.REGISTER_A),
    (tt.LD, tt.REGISTER_E, tt.REGISTER_B),
    (tt.LD, tt.REGISTER_E, tt.REGISTER_C),
    (tt.LD, tt.REGISTER_E, tt.REGISTER_D),
    (tt.LD, tt.REGISTER_E, tt.REGISTER_E),
    (tt.LD, tt.REGISTER_E, tt.REGISTER_H),
    (tt.LD, tt.REGISTER_E, tt.REGISTER_L),
    (tt.LD, tt.REGISTER_E, tt.REGISTER_HL),
    (tt.LD, tt.REGISTER_H, tt.REGISTER_A),
    (tt.LD, tt.REGISTER_H, tt.REGISTER_B),
    (tt.LD, tt.REGISTER_H, tt.REGISTER_C),
    (tt.LD, tt.REGISTER_H, tt.REGISTER_D),
    (tt.LD, tt.REGISTER_H, tt.REGISTER_E),
    (tt.LD, tt.REGISTER_H, tt.REGISTER_H),
    (tt.LD, tt.REGISTER_H, tt.REGISTER_L),
    (tt.LD, tt.REGISTER_H, tt.REGISTER_HL),
    (tt.LD, tt.REGISTER_L, tt.REGISTER_A),
    (tt.LD, tt.REGISTER_L, tt.REGISTER_B),
    (tt.LD, tt.REGISTER_L, tt.REGISTER_C),
    (tt.LD, tt.REGISTER_L, tt.REGISTER_D),
    (tt.LD, tt.REGISTER_L, tt.REGISTER_E),
    (tt.LD, tt.REGISTER_L, tt.REGISTER_H),
    (tt.LD, tt.REGISTER_L, tt.REGISTER_L),
    (tt.LD, tt.REGISTER_L, tt.REGISTER_HL),
    (tt.LD, tt.REGISTER_BC, tt.REGISTER_A),
    (tt.LD, tt.REGISTER_DE, tt.REGISTER_A),
    (tt.LD, tt.REGISTER_HL, tt.REGISTER_A),
    (tt.LD, tt.REGISTER_HL, tt.REGISTER_B),
    (tt.LD, tt.REGISTER_HL, tt.REGISTER_C),
    (tt.LD, tt.REGISTER_HL, tt.REGISTER_D),
    (tt.LD, tt.REGISTER_HL, tt.REGISTER_E),
    (tt.LD, tt.REGISTER_HL, tt.REGISTER_H),
    (tt.LD, tt.REGISTER_HL, tt.REGISTER_L),
    # LDD instructions
    (tt.LDD, tt.REGISTER_A, tt.REGISTER_HL),
    (tt.LDD, tt.REGISTER_HL, tt.REGISTER_A),
    # LDH instructions
    (tt.LDH, tt.VALUE, tt.REGISTER_A),
    (tt.LDH, tt.REGISTER_A, tt.VALUE),
    # LDI instructions
    (tt.LDI, tt.REGISTER_A, tt.REGISTER_HL),
    (tt.LDI, tt.REGISTER_HL, tt.REGISTER_A),
    # NOP instructions
    (tt.NOP,),
    # OR instructions
    (tt.OR, tt.REGISTER_A),
    (tt.OR, tt.REGISTER_B),
    (tt.OR, tt.REGISTER_C),
    (tt.OR, tt.REGISTER_D),
    (tt.OR, tt.REGISTER_E),
    (tt.OR, tt.REGISTER_H),
    (tt.OR, tt.REGISTER_L),
    (tt.OR, tt.REGISTER_HL),
    (tt.OR, tt.VALUE),
    # POP instructions
    (tt.POP, tt.REGISTER_AF),
    (tt.POP, tt.REGISTER_BC),
    (tt.POP, tt.REGISTER_DE),
    (tt.POP, tt.REGISTER_HL),
    # PUSH instructions
    (tt.PUSH, tt.REGISTER_AF),
    (tt.PUSH, tt.REGISTER_BC),
    (tt.PUSH, tt.REGISTER_DE),
    (tt.PUSH, tt.REGISTER_HL),
    # RES instructions
    (tt.RES, tt.BIT_VALUE, tt.REGISTER_A),
    (tt.RES, tt.BIT_VALUE, tt.REGISTER_B),
    (tt.RES, tt.BIT_VALUE, tt.REGISTER_C),
    (tt.RES, tt.BIT_VALUE, tt.REGISTER_D),
    (tt.RES, tt.BIT_VALUE, tt.REGISTER_E),
    (tt.RES, tt.BIT_VALUE, tt.REGISTER_H),
    (tt.RES, tt.BIT_VALUE, tt.REGISTER_L),
    (tt.RES, tt.BIT_VALUE, tt.REGISTER_HL),
    # RET instructions
    (tt.RET, tt.CONDITION_NZ),
    (tt.RET, tt.CONDITION_Z),
    (tt.RET, tt.CONDITION_NC),
    (tt.RET, tt.CONDITION_C),
    (tt.RET,),
    # RETI instructions
    (tt.RETI,),
    # RL instructions
    (tt.RL, tt.REGISTER_A),
    (tt.RL, tt.REGISTER_B),
    (tt.RL, tt.REGISTER_C),
    (tt.RL, tt.REGISTER_D),
    (tt.RL, tt.REGISTER_E),
    (tt.RL, tt.REGISTER_H),
    (tt.RL, tt.REGISTER_L),
    (tt.RL, tt.REGISTER_HL),
    # RLA instructions
    (tt.RLA,),
    # RLC instructions
    (tt.RLC, tt.REGISTER_A),
    (tt.RLC, tt.REGISTER_B),
    (tt.RLC, tt.REGISTER_C),
    (tt.RLC, tt.REGISTER_D),
    (tt.RLC, tt.REGISTER_E),
    (tt.RLC, tt.REGISTER_H),
    (tt.RLC, tt.REGISTER_L),
    (tt.RLC, tt.REGISTER_HL),
    # RLCA instructions
    (tt.RLCA,),
    # RR instructions
    (tt.RR, tt.REGISTER_A),
    (tt.RR, tt.REGISTER_B),
    (tt.RR, tt.REGISTER_C),
    (tt.RR, tt.REGISTER_D),
    (tt.RR, tt.REGISTER_E),
    (tt.RR, tt.REGISTER_H),
    (tt.RR, tt.REGISTER_L),
    (tt.RR, tt.REGISTER_HL),
    # RRA instructions
    (tt.RRA,),
    # RRC instructions
    (tt.RRC, tt.REGISTER_A),
    (tt.RRC, tt.REGISTER_B),
    (tt.RRC, tt.REGISTER_C),
    (tt.RRC, tt.REGISTER_D),
    (tt.RRC, tt.REGISTER_E),
    (tt.RRC, tt.REGISTER_H),
    (tt.RRC, tt.REGISTER_L),
    (tt.RRC, tt.REGISTER_HL),
    # RRCA instructions
    (tt.RRCA,),
    # RST instructions
    (tt.RST, tt.HEXADECIMAL),
    # SBC instructions
    (tt.SBC, tt.REGISTER_A, tt.REGISTER_A),
    (tt.SBC, tt.REGISTER_A, tt.REGISTER_B),
    (tt.SBC, tt.REGISTER_A, tt.REGISTER_C),
    (tt.SBC, tt.REGISTER_A, tt.REGISTER_D),
    (tt.SBC, tt.REGISTER_A, tt.REGISTER_E),
    (tt.SBC, tt.REGISTER_A, tt.REGISTER_H),
    (tt.SBC, tt.REGISTER_A, tt.REGISTER_L),
    (tt.SBC, tt.REGISTER_A, tt.REGISTER_HL),
    (tt.SBC, tt.REGISTER_A, tt.VALUE),
    # SCF instructions
    (tt.SCF,),
    # SET instructions
    (tt.SET, tt.BIT_VALUE, tt.REGISTER_A),
    (tt.SET, tt.BIT_VALUE, tt.REGISTER_B),
    (tt.SET, tt.BIT_VALUE, tt.REGISTER_C),
    (tt.SET, tt.BIT_VALUE, tt.REGISTER_D),
    (tt.SET, tt.BIT_VALUE, tt.REGISTER_E),
    (tt.SET, tt.BIT_VALUE, tt.REGISTER_H),
    (tt.SET, tt.BIT_VALUE, tt.REGISTER_L),
    (tt.SET, tt.BIT_VALUE, tt.REGISTER_HL),
    # SLA instructions
    (tt.SLA, tt.REGISTER_A),
    (tt.SLA, tt.REGISTER_B),
    (tt.SLA, tt.REGISTER_C),
    (tt.SLA, tt.REGISTER_D),
    (tt.SLA, tt.REGISTER_E),
    (tt.SLA, tt.REGISTER_H),
    (tt.SLA, tt.REGISTER_L),
    (tt.SLA, tt.REGISTER_HL),
    # SRA instructions
    (tt.SRA, tt.REGISTER_A),
    (tt.SRA, tt.REGISTER_B),
    (tt.SRA, tt.REGISTER_C),
    (tt.SRA, tt.REGISTER_D),
    (tt.SRA, tt.REGISTER_E),
    (tt.SRA, tt.REGISTER_H),
    (tt.SRA, tt.REGISTER_L),
    (tt.SRA, tt.REGISTER_HL),
    # SRL instructions
    (tt.SRL, tt.REGISTER_A),
    (tt.SRL, tt.REGISTER_B),
    (tt.SRL, tt.REGISTER_C),
    (tt.SRL, tt.REGISTER_D),
    (tt.SRL, tt.REGISTER_E),
    (tt.SRL, tt.REGISTER_H),
    (tt.SRL, tt.REGISTER_L),
    (tt.SRL, tt.REGISTER_HL),
    # STOP instructions
    (tt.STOP,),
    # SUB instructions
    (tt.SUB, tt.REGISTER_A),
    (tt.SUB, tt.REGISTER_B),
    (tt.SUB, tt.REGISTER_C),
    (tt.SUB, tt.REGISTER_D),
    (tt.SUB, tt.REGISTER_E),
    (tt.SUB, tt.REGISTER_H),
    (tt.SUB, tt.REGISTER_L),
    (tt.SUB, tt.REGISTER_HL),
    (tt.SUB, tt.VALUE),
    # SWAP instructions
    (tt.SWAP, tt.REGISTER_A),
    (tt.SWAP, tt.REGISTER_B),
    (tt.SWAP, tt.REGISTER_C),
    (tt.SWAP, tt.REGISTER_D),
    (tt.SWAP, tt.REGISTER_E),
    (tt.SWAP, tt.REGISTER_H),
    (tt.SWAP, tt.REGISTER_L),
    (tt.SWAP, tt.REGISTER_HL),
    # XOR instructions
    (tt.XOR, tt.REGISTER_A),
    (tt.XOR, tt.REGISTER_B),
    (tt.XOR, tt.REGISTER_C),
    (tt.XOR, tt.REGISTER_D),
    (tt.XOR, tt.REGISTER_E),
    (tt.XOR, tt.REGISTER_H),
    (tt.XOR, tt.REGISTER_L),
    (tt.XOR, tt.REGISTER_HL),
    (tt.XOR, tt.VALUE),
    # Label rule
    (tt.LABEL,)
]
